# TODO debug/release builds
NAME := libft.a
NAME_SHARED := libft.so

BUILD := build
INCLUDE := include

SRC := %C_FILES%
OBJ := $(SRC:%.c=$(BUILD)/%.o)
DEP := $(OBJ:%.o=%.d)

# AR := llvm-ar
AR := ar
CC := clang

MAKEFLAGS += -j

WFLAGS := -Wall -Wextra
WFLAGS += -Werror
# WFLAGS += -Wpedantic
# WFLAGS += -Wno-cast-function-type
# WFLAGS += -Wno-bad-function-cast
# OFLAGS := -O1 -g -fsanitize=address -fno-omit-frame-pointer
OFLAGS := -O2 -march=native
OFLAGS += -finline-functions
OFLAGS += -ftree-vectorize
# CFLAGS += -fpic
# OFLAGS += -flto
CFLAGS := $(WFLAGS) $(OFLAGS) -MMD -I$(INCLUDE)
# CFLAGS += -DUSEAVX2

vpath %.c %SRC_DIRS%

.PHONY: all clean fclean re test love debug db

$(NAME): $(OBJ)
	@printf "[$(NAME)] Linking objects...\n"
	@$(AR) rcs $@ $?
	@printf "\033[32;1m[$(NAME)] Done\033[0m\n"

-include $(DEP)
$(BUILD)/%.o: %.c
	@mkdir -p $(@D)
	@printf "[$(NAME)] Building object '$@'\n"
	@$(CC) $(CFLAGS) -o $@ -c $<

$(NAME_SHARED): $(OBJ)
	@$(CC) $(CFLAGS) -shared -o $@ $^

all: $(NAME)

clean:
	@rm -rf $(BUILD)

fclean: clean
	@rm -f $(NAME)
	@rm -f $(NAME_SHARED)

re: fclean
	@make all

test: all
	@test/test.sh "$(CC)" "$(CFLAGS)" "-L./ $(NAME)"

love:
	@printf 'not war\n'
	@sh bin/genmake.sh > Makefile

debug:
	@printf 'nope\n'

db:
	@compiledb make
